--------------------------------------------------------
--  File created - Friday-April-11-2025   
--------------------------------------------------------
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_80563";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_80571";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_80574";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_80592";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_80595";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_80598";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_80601";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_80604";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_80607";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_83562";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_83565";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_83568";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_83571";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_83574";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_83578";
DROP SEQUENCE "URBAN_FOOD"."ISEQ$$_84726";
DROP TABLE "URBAN_FOOD"."CART" cascade constraints;
DROP TABLE "URBAN_FOOD"."CATEGORIES" cascade constraints;
DROP TABLE "URBAN_FOOD"."CUSTOMER" cascade constraints;
DROP TABLE "URBAN_FOOD"."CUSTOMER_FEEDBACK" cascade constraints;
DROP TABLE "URBAN_FOOD"."DELIVERY" cascade constraints;
DROP TABLE "URBAN_FOOD"."ORDERS" cascade constraints;
DROP TABLE "URBAN_FOOD"."ORDER_DETAILS" cascade constraints;
DROP TABLE "URBAN_FOOD"."ORDER_LOG" cascade constraints;
DROP TABLE "URBAN_FOOD"."PAYMENTS" cascade constraints;
DROP TABLE "URBAN_FOOD"."PRODUCTS" cascade constraints;
DROP TABLE "URBAN_FOOD"."SUPPLIER" cascade constraints;
DROP TABLE "URBAN_FOOD"."USERS" cascade constraints;
DROP TABLE "URBAN_FOOD"."CUSTOMER" cascade constraints;
DROP TABLE "URBAN_FOOD"."PRODUCTS" cascade constraints;
DROP TABLE "URBAN_FOOD"."USERS" cascade constraints;
DROP TABLE "URBAN_FOOD"."ORDERS" cascade constraints;
DROP TABLE "URBAN_FOOD"."SUPPLIER" cascade constraints;
DROP TABLE "URBAN_FOOD"."CATEGORIES" cascade constraints;
DROP TABLE "URBAN_FOOD"."CART" cascade constraints;
DROP TABLE "URBAN_FOOD"."CUSTOMER_FEEDBACK" cascade constraints;
DROP TABLE "URBAN_FOOD"."DELIVERY" cascade constraints;
DROP TABLE "URBAN_FOOD"."ORDER_DETAILS" cascade constraints;
DROP TABLE "URBAN_FOOD"."ORDER_LOG" cascade constraints;
DROP TABLE "URBAN_FOOD"."PAYMENTS" cascade constraints;
DROP PROCEDURE "URBAN_FOOD"."ADDTOCART";
DROP PROCEDURE "URBAN_FOOD"."CATEGORYCONTROLLERPROCEDURE";
DROP PROCEDURE "URBAN_FOOD"."CHECKCATEGORYAVAILABILITY";
DROP PROCEDURE "URBAN_FOOD"."CHECKCUSTOMERAVAILABILITY";
DROP PROCEDURE "URBAN_FOOD"."CHECKPRODUCTAVAILABILITY";
DROP PROCEDURE "URBAN_FOOD"."CHECKSUPPLIERAVAILABILITY";
DROP PROCEDURE "URBAN_FOOD"."CHECKUSERAVAILABILITY";
DROP PROCEDURE "URBAN_FOOD"."CUSTOMERCONTROLLERPROCEDURE";
DROP PROCEDURE "URBAN_FOOD"."DELETECATEGORY";
DROP PROCEDURE "URBAN_FOOD"."DELETECUSTOMER";
DROP PROCEDURE "URBAN_FOOD"."DELETEPRODUCT";
DROP PROCEDURE "URBAN_FOOD"."DELETESUPPLIER";
DROP PROCEDURE "URBAN_FOOD"."DELETEUSER";
DROP PROCEDURE "URBAN_FOOD"."NEWCATEGORY";
DROP PROCEDURE "URBAN_FOOD"."NEWCUSTOMER";
DROP PROCEDURE "URBAN_FOOD"."NEWPRODUCT";
DROP PROCEDURE "URBAN_FOOD"."NEWSUPPLIER";
DROP PROCEDURE "URBAN_FOOD"."NEWUSER";
DROP PROCEDURE "URBAN_FOOD"."PLACEORDERBYCART";
DROP PROCEDURE "URBAN_FOOD"."PRODUCTCONTROLLERPROCEDURE";
DROP PROCEDURE "URBAN_FOOD"."SUPPLIERCONTROLLERPROCEDURE";
DROP PROCEDURE "URBAN_FOOD"."UPDATECATEGORY";
DROP PROCEDURE "URBAN_FOOD"."UPDATECUSTOMER";
DROP PROCEDURE "URBAN_FOOD"."UPDATEDELIVERYSTATUS";
DROP PROCEDURE "URBAN_FOOD"."UPDATEPAYMENTSTATUS";
DROP PROCEDURE "URBAN_FOOD"."UPDATEPRODUCT";
DROP PROCEDURE "URBAN_FOOD"."UPDATESUPPLIER";
DROP PROCEDURE "URBAN_FOOD"."UPDATEUSER";
DROP PROCEDURE "URBAN_FOOD"."USERSCONTROLLERPROCEDURE";
DROP PROCEDURE "URBAN_FOOD"."DELETECATEGORY";
DROP PROCEDURE "URBAN_FOOD"."NEWCATEGORY";
DROP PROCEDURE "URBAN_FOOD"."UPDATECATEGORY";
DROP PROCEDURE "URBAN_FOOD"."NEWCUSTOMER";
DROP PROCEDURE "URBAN_FOOD"."UPDATECUSTOMER";
DROP PROCEDURE "URBAN_FOOD"."DELETECUSTOMER";
DROP PROCEDURE "URBAN_FOOD"."CHECKCATEGORYAVAILABILITY";
DROP PROCEDURE "URBAN_FOOD"."CHECKCUSTOMERAVAILABILITY";
DROP PROCEDURE "URBAN_FOOD"."CHECKPRODUCTAVAILABILITY";
DROP PROCEDURE "URBAN_FOOD"."CHECKSUPPLIERAVAILABILITY";
DROP PROCEDURE "URBAN_FOOD"."CHECKUSERAVAILABILITY";
DROP PROCEDURE "URBAN_FOOD"."NEWPRODUCT";
DROP PROCEDURE "URBAN_FOOD"."UPDATEPRODUCT";
DROP PROCEDURE "URBAN_FOOD"."DELETEPRODUCT";
DROP PROCEDURE "URBAN_FOOD"."NEWSUPPLIER";
DROP PROCEDURE "URBAN_FOOD"."UPDATESUPPLIER";
DROP PROCEDURE "URBAN_FOOD"."DELETESUPPLIER";
DROP PROCEDURE "URBAN_FOOD"."NEWUSER";
DROP PROCEDURE "URBAN_FOOD"."UPDATEUSER";
DROP PROCEDURE "URBAN_FOOD"."DELETEUSER";
DROP FUNCTION "URBAN_FOOD"."GETCUSTOMERPROFILE";
--------------------------------------------------------
--  DDL for Table CART
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."CART" 
   (	"CART_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CUSTOMER_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	"QUANTITY" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CATEGORIES
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."CATEGORIES" 
   (	"CATEGORY_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" VARCHAR2(100 BYTE), 
	"DESCRIPTION" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CUSTOMER
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."CUSTOMER" 
   (	"CUSTOMER_ID" NUMBER, 
	"FULL_NAME" VARCHAR2(100 BYTE), 
	"PHONE" VARCHAR2(20 BYTE), 
	"ADDRESS" VARCHAR2(200 BYTE), 
	"IMAGE_URL" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CUSTOMER_FEEDBACK
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."CUSTOMER_FEEDBACK" 
   (	"FEEDBACK_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USER_ID" NUMBER, 
	"MESSAGE" VARCHAR2(1000 BYTE), 
	"TYPE" VARCHAR2(50 BYTE), 
	"TIMESTAMP" DATE DEFAULT SYSDATE, 
	"PRODUCT_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DELIVERY
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."DELIVERY" 
   (	"DELIVERY_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ORDER_ID" NUMBER, 
	"STATUS" VARCHAR2(50 BYTE), 
	"ESTIMATED_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORDERS
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."ORDERS" 
   (	"ORDER_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CUSTOMER_ID" NUMBER, 
	"ORDER_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"ORDER_STATUS" VARCHAR2(40 BYTE) DEFAULT 'Processing', 
	"TOTAL_PRICE" NUMBER(10,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORDER_DETAILS
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."ORDER_DETAILS" 
   (	"ORDER_DETAIL_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ORDER_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	"QUANTITY" NUMBER, 
	"SUB_TOTAL" NUMBER(10,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORDER_LOG
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."ORDER_LOG" 
   (	"LOG_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ORDER_ID" NUMBER, 
	"CUSTOMER_ID" NUMBER, 
	"ORDER_DATE" TIMESTAMP (6), 
	"TOTAL_PRICE" NUMBER(10,2), 
	"DELETED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PAYMENTS
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."PAYMENTS" 
   (	"PAYMENT_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ORDER_ID" NUMBER, 
	"TOTAL_PRICE" NUMBER(10,2), 
	"PAYMENT_DATE" DATE DEFAULT SYSDATE, 
	"PAYMENT_METHOD" VARCHAR2(50 BYTE) DEFAULT 'Cash on Delivery', 
	"STATUS" VARCHAR2(50 BYTE) DEFAULT 'Processing'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRODUCTS
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."PRODUCTS" 
   (	"PRODUCT_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"SUPPLIER_ID" NUMBER, 
	"CATEGORY_ID" NUMBER, 
	"NAME" VARCHAR2(100 BYTE), 
	"IMAGE_URL" VARCHAR2(255 BYTE), 
	"WEIGHT" NUMBER, 
	"STOCK" NUMBER, 
	"PRICE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SUPPLIER
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."SUPPLIER" 
   (	"SUPPLIER_ID" NUMBER, 
	"FULL_NAME" VARCHAR2(100 BYTE), 
	"PHONE" VARCHAR2(20 BYTE), 
	"ADDRESS" VARCHAR2(200 BYTE), 
	"IMAGE_URL" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."USERS" 
   (	"USER_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USER_ROLE" VARCHAR2(20 BYTE), 
	"USER_NAME" VARCHAR2(100 BYTE), 
	"USER_EMAIL" VARCHAR2(100 BYTE), 
	"USER_PASSWORD" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CUSTOMER
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."CUSTOMER" 
   (	"CUSTOMER_ID" NUMBER, 
	"FULL_NAME" VARCHAR2(100 BYTE), 
	"PHONE" VARCHAR2(20 BYTE), 
	"ADDRESS" VARCHAR2(200 BYTE), 
	"IMAGE_URL" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRODUCTS
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."PRODUCTS" 
   (	"PRODUCT_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"SUPPLIER_ID" NUMBER, 
	"CATEGORY_ID" NUMBER, 
	"NAME" VARCHAR2(100 BYTE), 
	"IMAGE_URL" VARCHAR2(255 BYTE), 
	"WEIGHT" NUMBER, 
	"STOCK" NUMBER, 
	"PRICE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."USERS" 
   (	"USER_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USER_ROLE" VARCHAR2(20 BYTE), 
	"USER_NAME" VARCHAR2(100 BYTE), 
	"USER_EMAIL" VARCHAR2(100 BYTE), 
	"USER_PASSWORD" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORDERS
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."ORDERS" 
   (	"ORDER_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CUSTOMER_ID" NUMBER, 
	"ORDER_DATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"ORDER_STATUS" VARCHAR2(40 BYTE) DEFAULT 'Processing', 
	"TOTAL_PRICE" NUMBER(10,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SUPPLIER
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."SUPPLIER" 
   (	"SUPPLIER_ID" NUMBER, 
	"FULL_NAME" VARCHAR2(100 BYTE), 
	"PHONE" VARCHAR2(20 BYTE), 
	"ADDRESS" VARCHAR2(200 BYTE), 
	"IMAGE_URL" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CATEGORIES
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."CATEGORIES" 
   (	"CATEGORY_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" VARCHAR2(100 BYTE), 
	"DESCRIPTION" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CART
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."CART" 
   (	"CART_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CUSTOMER_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	"QUANTITY" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CUSTOMER_FEEDBACK
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."CUSTOMER_FEEDBACK" 
   (	"FEEDBACK_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"USER_ID" NUMBER, 
	"MESSAGE" VARCHAR2(1000 BYTE), 
	"TYPE" VARCHAR2(50 BYTE), 
	"TIMESTAMP" DATE DEFAULT SYSDATE, 
	"PRODUCT_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DELIVERY
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."DELIVERY" 
   (	"DELIVERY_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ORDER_ID" NUMBER, 
	"STATUS" VARCHAR2(50 BYTE), 
	"ESTIMATED_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORDER_DETAILS
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."ORDER_DETAILS" 
   (	"ORDER_DETAIL_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ORDER_ID" NUMBER, 
	"PRODUCT_ID" NUMBER, 
	"QUANTITY" NUMBER, 
	"SUB_TOTAL" NUMBER(10,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORDER_LOG
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."ORDER_LOG" 
   (	"LOG_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ORDER_ID" NUMBER, 
	"CUSTOMER_ID" NUMBER, 
	"ORDER_DATE" TIMESTAMP (6), 
	"TOTAL_PRICE" NUMBER(10,2), 
	"DELETED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PAYMENTS
--------------------------------------------------------

  CREATE TABLE "URBAN_FOOD"."PAYMENTS" 
   (	"PAYMENT_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ORDER_ID" NUMBER, 
	"TOTAL_PRICE" NUMBER(10,2), 
	"PAYMENT_DATE" DATE DEFAULT SYSDATE, 
	"PAYMENT_METHOD" VARCHAR2(50 BYTE) DEFAULT 'Cash on Delivery', 
	"STATUS" VARCHAR2(50 BYTE) DEFAULT 'Processing'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
REM INSERTING into URBAN_FOOD.CART
SET DEFINE OFF;
REM INSERTING into URBAN_FOOD.CATEGORIES
SET DEFINE OFF;
Insert into URBAN_FOOD.CATEGORIES (CATEGORY_ID,NAME,DESCRIPTION) values (2,'Spicy','Soo hot !!!');
Insert into URBAN_FOOD.CATEGORIES (CATEGORY_ID,NAME,DESCRIPTION) values (3,'Sugary','Insanely bad to health');
Insert into URBAN_FOOD.CATEGORIES (CATEGORY_ID,NAME,DESCRIPTION) values (1,'Hand crafts','Creations which make us insane');
REM INSERTING into URBAN_FOOD.CUSTOMER
SET DEFINE OFF;
Insert into URBAN_FOOD.CUSTOMER (CUSTOMER_ID,FULL_NAME,PHONE,ADDRESS,IMAGE_URL) values (162,'Janindu pramod','0760755522','Nadugala,Matara.',null);
Insert into URBAN_FOOD.CUSTOMER (CUSTOMER_ID,FULL_NAME,PHONE,ADDRESS,IMAGE_URL) values (181,null,null,null,null);
Insert into URBAN_FOOD.CUSTOMER (CUSTOMER_ID,FULL_NAME,PHONE,ADDRESS,IMAGE_URL) values (161,'Janindu Pramod','0413401148','Normal Address',null);
REM INSERTING into URBAN_FOOD.CUSTOMER_FEEDBACK
SET DEFINE OFF;
REM INSERTING into URBAN_FOOD.DELIVERY
SET DEFINE OFF;
Insert into URBAN_FOOD.DELIVERY (DELIVERY_ID,ORDER_ID,STATUS,ESTIMATED_DATE) values (46,90,'Processing',to_timestamp('14-APR-25 07.04.38.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into URBAN_FOOD.DELIVERY (DELIVERY_ID,ORDER_ID,STATUS,ESTIMATED_DATE) values (47,91,'Processing',to_timestamp('14-APR-25 08.49.02.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into URBAN_FOOD.ORDERS
SET DEFINE OFF;
Insert into URBAN_FOOD.ORDERS (ORDER_ID,CUSTOMER_ID,ORDER_DATE,ORDER_STATUS,TOTAL_PRICE) values (90,161,to_timestamp('11-APR-25 07.04.38.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'Processing',5000);
Insert into URBAN_FOOD.ORDERS (ORDER_ID,CUSTOMER_ID,ORDER_DATE,ORDER_STATUS,TOTAL_PRICE) values (91,161,to_timestamp('11-APR-25 08.49.02.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),'Processing',17500);
REM INSERTING into URBAN_FOOD.ORDER_DETAILS
SET DEFINE OFF;
Insert into URBAN_FOOD.ORDER_DETAILS (ORDER_DETAIL_ID,ORDER_ID,PRODUCT_ID,QUANTITY,SUB_TOTAL) values (74,90,107,1,1000);
Insert into URBAN_FOOD.ORDER_DETAILS (ORDER_DETAIL_ID,ORDER_ID,PRODUCT_ID,QUANTITY,SUB_TOTAL) values (75,90,107,4,4000);
Insert into URBAN_FOOD.ORDER_DETAILS (ORDER_DETAIL_ID,ORDER_ID,PRODUCT_ID,QUANTITY,SUB_TOTAL) values (76,91,108,3,7500);
Insert into URBAN_FOOD.ORDER_DETAILS (ORDER_DETAIL_ID,ORDER_ID,PRODUCT_ID,QUANTITY,SUB_TOTAL) values (77,91,109,4,10000);
REM INSERTING into URBAN_FOOD.ORDER_LOG
SET DEFINE OFF;
Insert into URBAN_FOOD.ORDER_LOG (LOG_ID,ORDER_ID,CUSTOMER_ID,ORDER_DATE,TOTAL_PRICE,DELETED_AT) values (1,46,73,to_timestamp('08-APR-25 01.37.50.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),5500,to_timestamp('08-APR-25 02.02.30.465000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into URBAN_FOOD.ORDER_LOG (LOG_ID,ORDER_ID,CUSTOMER_ID,ORDER_DATE,TOTAL_PRICE,DELETED_AT) values (21,61,73,to_timestamp('08-APR-25 11.54.19.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),5500,to_timestamp('08-APR-25 12.31.36.098000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into URBAN_FOOD.ORDER_LOG (LOG_ID,ORDER_ID,CUSTOMER_ID,ORDER_DATE,TOTAL_PRICE,DELETED_AT) values (22,62,73,to_timestamp('08-APR-25 12.32.06.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),5250,to_timestamp('08-APR-25 12.42.40.452000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into URBAN_FOOD.ORDER_LOG (LOG_ID,ORDER_ID,CUSTOMER_ID,ORDER_DATE,TOTAL_PRICE,DELETED_AT) values (41,63,73,to_timestamp('08-APR-25 12.43.09.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),9250,to_timestamp('09-APR-25 09.00.36.783000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into URBAN_FOOD.ORDER_LOG (LOG_ID,ORDER_ID,CUSTOMER_ID,ORDER_DATE,TOTAL_PRICE,DELETED_AT) values (61,82,161,to_timestamp('11-APR-25 05.14.54.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),24000,to_timestamp('11-APR-25 05.16.06.336000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into URBAN_FOOD.ORDER_LOG (LOG_ID,ORDER_ID,CUSTOMER_ID,ORDER_DATE,TOTAL_PRICE,DELETED_AT) values (62,83,161,to_timestamp('11-APR-25 06.09.24.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),5500,to_timestamp('11-APR-25 06.09.45.778000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into URBAN_FOOD.ORDER_LOG (LOG_ID,ORDER_ID,CUSTOMER_ID,ORDER_DATE,TOTAL_PRICE,DELETED_AT) values (63,84,161,to_timestamp('11-APR-25 06.37.44.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),11000,to_timestamp('11-APR-25 06.38.23.848000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into URBAN_FOOD.ORDER_LOG (LOG_ID,ORDER_ID,CUSTOMER_ID,ORDER_DATE,TOTAL_PRICE,DELETED_AT) values (64,85,161,to_timestamp('11-APR-25 06.40.26.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),15500,to_timestamp('11-APR-25 06.43.53.936000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into URBAN_FOOD.ORDER_LOG (LOG_ID,ORDER_ID,CUSTOMER_ID,ORDER_DATE,TOTAL_PRICE,DELETED_AT) values (65,89,161,to_timestamp('11-APR-25 06.43.28.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),9500,to_timestamp('11-APR-25 06.44.11.065000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into URBAN_FOOD.PAYMENTS
SET DEFINE OFF;
Insert into URBAN_FOOD.PAYMENTS (PAYMENT_ID,ORDER_ID,TOTAL_PRICE,PAYMENT_DATE,PAYMENT_METHOD,STATUS) values (46,90,5000,to_date('11-APR-25','DD-MON-RR'),'Cash on Delivery','Processing');
Insert into URBAN_FOOD.PAYMENTS (PAYMENT_ID,ORDER_ID,TOTAL_PRICE,PAYMENT_DATE,PAYMENT_METHOD,STATUS) values (47,91,17500,to_date('11-APR-25','DD-MON-RR'),'Cash on Delivery','Processing');
REM INSERTING into URBAN_FOOD.PRODUCTS
SET DEFINE OFF;
Insert into URBAN_FOOD.PRODUCTS (PRODUCT_ID,SUPPLIER_ID,CATEGORY_ID,NAME,IMAGE_URL,WEIGHT,STOCK,PRICE) values (107,160,1,'Kottu2','imgsrc=http',500,5,1000);
Insert into URBAN_FOOD.PRODUCTS (PRODUCT_ID,SUPPLIER_ID,CATEGORY_ID,NAME,IMAGE_URL,WEIGHT,STOCK,PRICE) values (108,160,2,'Kottu2','imgsrc=http',500,12,2500);
Insert into URBAN_FOOD.PRODUCTS (PRODUCT_ID,SUPPLIER_ID,CATEGORY_ID,NAME,IMAGE_URL,WEIGHT,STOCK,PRICE) values (109,160,3,'Kottu2','imgsrc=http',500,12,2500);
Insert into URBAN_FOOD.PRODUCTS (PRODUCT_ID,SUPPLIER_ID,CATEGORY_ID,NAME,IMAGE_URL,WEIGHT,STOCK,PRICE) values (111,160,3,'nOODLES','imgsrc=http',500,12,3500);
Insert into URBAN_FOOD.PRODUCTS (PRODUCT_ID,SUPPLIER_ID,CATEGORY_ID,NAME,IMAGE_URL,WEIGHT,STOCK,PRICE) values (110,160,3,'nOODLES','imgsrc=http',500,12,3500);
REM INSERTING into URBAN_FOOD.SUPPLIER
SET DEFINE OFF;
Insert into URBAN_FOOD.SUPPLIER (SUPPLIER_ID,FULL_NAME,PHONE,ADDRESS,IMAGE_URL) values (163,null,null,null,null);
Insert into URBAN_FOOD.SUPPLIER (SUPPLIER_ID,FULL_NAME,PHONE,ADDRESS,IMAGE_URL) values (160,null,null,null,null);
REM INSERTING into URBAN_FOOD.USERS
SET DEFINE OFF;
Insert into URBAN_FOOD.USERS (USER_ID,USER_ROLE,USER_NAME,USER_EMAIL,USER_PASSWORD) values (162,'customer','janindu','janindupramod@gmail.com','janindu');
Insert into URBAN_FOOD.USERS (USER_ID,USER_ROLE,USER_NAME,USER_EMAIL,USER_PASSWORD) values (163,'supplier','hansi','ehansitharuka@gmail.com','hansi');
Insert into URBAN_FOOD.USERS (USER_ID,USER_ROLE,USER_NAME,USER_EMAIL,USER_PASSWORD) values (160,'supplier','supplier','supplier','supplier');
Insert into URBAN_FOOD.USERS (USER_ID,USER_ROLE,USER_NAME,USER_EMAIL,USER_PASSWORD) values (161,'customer','customer','customer','customer');
Insert into URBAN_FOOD.USERS (USER_ID,USER_ROLE,USER_NAME,USER_EMAIL,USER_PASSWORD) values (181,'customer','testcase','testcase','testcase');
--------------------------------------------------------
--  DDL for Index SYS_C008505
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008505" ON "URBAN_FOOD"."USERS" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008506
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008506" ON "URBAN_FOOD"."USERS" ("USER_EMAIL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008507
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008507" ON "URBAN_FOOD"."CUSTOMER" ("CUSTOMER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008511
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008511" ON "URBAN_FOOD"."SUPPLIER" ("SUPPLIER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008514
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008514" ON "URBAN_FOOD"."CATEGORIES" ("CATEGORY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008519
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008519" ON "URBAN_FOOD"."PRODUCTS" ("PRODUCT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008526
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008526" ON "URBAN_FOOD"."ORDERS" ("ORDER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008529
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008529" ON "URBAN_FOOD"."ORDER_DETAILS" ("ORDER_DETAIL_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008541
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008541" ON "URBAN_FOOD"."CUSTOMER_FEEDBACK" ("FEEDBACK_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008576
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008576" ON "URBAN_FOOD"."DELIVERY" ("DELIVERY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008596
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008596" ON "URBAN_FOOD"."PAYMENTS" ("PAYMENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008600
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008600" ON "URBAN_FOOD"."ORDER_LOG" ("LOG_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008605
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008605" ON "URBAN_FOOD"."CART" ("CART_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008605
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008605" ON "URBAN_FOOD"."CART" ("CART_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008514
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008514" ON "URBAN_FOOD"."CATEGORIES" ("CATEGORY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008507
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008507" ON "URBAN_FOOD"."CUSTOMER" ("CUSTOMER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008541
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008541" ON "URBAN_FOOD"."CUSTOMER_FEEDBACK" ("FEEDBACK_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008576
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008576" ON "URBAN_FOOD"."DELIVERY" ("DELIVERY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008526
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008526" ON "URBAN_FOOD"."ORDERS" ("ORDER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008529
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008529" ON "URBAN_FOOD"."ORDER_DETAILS" ("ORDER_DETAIL_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008600
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008600" ON "URBAN_FOOD"."ORDER_LOG" ("LOG_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008596
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008596" ON "URBAN_FOOD"."PAYMENTS" ("PAYMENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008519
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008519" ON "URBAN_FOOD"."PRODUCTS" ("PRODUCT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008511
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008511" ON "URBAN_FOOD"."SUPPLIER" ("SUPPLIER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008505
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008505" ON "URBAN_FOOD"."USERS" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008506
--------------------------------------------------------

  CREATE UNIQUE INDEX "URBAN_FOOD"."SYS_C008506" ON "URBAN_FOOD"."USERS" ("USER_EMAIL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger TRG_CREATEDELIVERY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "URBAN_FOOD"."TRG_CREATEDELIVERY" 
AFTER INSERT ON ORDERS
FOR EACH ROW
BEGIN
  INSERT INTO DELIVERY (ORDER_ID, STATUS, ESTIMATED_DATE)
  VALUES (:NEW.ORDER_ID, 'Processing', SYSDATE + 3);
END;
/
ALTER TRIGGER "URBAN_FOOD"."TRG_CREATEDELIVERY" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_DELETEDORDERS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "URBAN_FOOD"."TRG_DELETEDORDERS" 
BEFORE DELETE ON ORDERS
FOR EACH ROW
BEGIN
    INSERT INTO Order_Log (
        ORDER_ID,
        CUSTOMER_ID,
        ORDER_DATE,
        TOTAL_PRICE
    )
    VALUES (
        :OLD.ORDER_ID,
        :OLD.CUSTOMER_ID,
        :OLD.ORDER_DATE,
        :OLD.TOTAL_PRICE
    );
END;
/
ALTER TRIGGER "URBAN_FOOD"."TRG_DELETEDORDERS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSERTPAYMENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "URBAN_FOOD"."TRG_INSERTPAYMENT" 
AFTER INSERT ON ORDERS
FOR EACH ROW
BEGIN
  INSERT INTO PAYMENTS (ORDER_ID, TOTAL_PRICE)
  VALUES (:NEW.ORDER_ID, :NEW.TOTAL_PRICE);
END;
/
ALTER TRIGGER "URBAN_FOOD"."TRG_INSERTPAYMENT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSERTUSERBYROLE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "URBAN_FOOD"."TRG_INSERTUSERBYROLE" 
AFTER INSERT ON USERS
FOR EACH ROW
BEGIN
    IF :NEW.USER_ROLE = 'customer' THEN
        INSERT INTO CUSTOMER (CUSTOMER_ID) VALUES (:NEW.USER_ID);

    ELSIF :NEW.USER_ROLE = 'supplier' THEN
        INSERT INTO SUPPLIER (SUPPLIER_ID) VALUES (:NEW.USER_ID);
    END IF;
END;
/
ALTER TRIGGER "URBAN_FOOD"."TRG_INSERTUSERBYROLE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_USERROLECHANGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "URBAN_FOOD"."TRG_USERROLECHANGE" 
AFTER UPDATE ON USERS
FOR EACH ROW
BEGIN

    IF :OLD.USER_ROLE != :NEW.USER_ROLE THEN

        IF :NEW.USER_ROLE = 'customer' THEN
            DELETE FROM SUPPLIER WHERE SUPPLIER_ID = :NEW.USER_ID;
            INSERT INTO CUSTOMER (CUSTOMER_ID) VALUES (:NEW.USER_ID);

        ELSIF :NEW.USER_ROLE = 'supplier' THEN
            DELETE FROM CUSTOMER WHERE CUSTOMER_ID = :NEW.USER_ID;
            INSERT INTO SUPPLIER (SUPPLIER_ID) VALUES (:NEW.USER_ID);
        END IF;
    END IF;
END;
/
ALTER TRIGGER "URBAN_FOOD"."TRG_USERROLECHANGE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_DELETEDORDERS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "URBAN_FOOD"."TRG_DELETEDORDERS" 
BEFORE DELETE ON ORDERS
FOR EACH ROW
BEGIN
    INSERT INTO Order_Log (
        ORDER_ID,
        CUSTOMER_ID,
        ORDER_DATE,
        TOTAL_PRICE
    )
    VALUES (
        :OLD.ORDER_ID,
        :OLD.CUSTOMER_ID,
        :OLD.ORDER_DATE,
        :OLD.TOTAL_PRICE
    );
END;
/
ALTER TRIGGER "URBAN_FOOD"."TRG_DELETEDORDERS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_CREATEDELIVERY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "URBAN_FOOD"."TRG_CREATEDELIVERY" 
AFTER INSERT ON ORDERS
FOR EACH ROW
BEGIN
  INSERT INTO DELIVERY (ORDER_ID, STATUS, ESTIMATED_DATE)
  VALUES (:NEW.ORDER_ID, 'Processing', SYSDATE + 3);
END;
/
ALTER TRIGGER "URBAN_FOOD"."TRG_CREATEDELIVERY" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSERTPAYMENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "URBAN_FOOD"."TRG_INSERTPAYMENT" 
AFTER INSERT ON ORDERS
FOR EACH ROW
BEGIN
  INSERT INTO PAYMENTS (ORDER_ID, TOTAL_PRICE)
  VALUES (:NEW.ORDER_ID, :NEW.TOTAL_PRICE);
END;
/
ALTER TRIGGER "URBAN_FOOD"."TRG_INSERTPAYMENT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_USERROLECHANGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "URBAN_FOOD"."TRG_USERROLECHANGE" 
AFTER UPDATE ON USERS
FOR EACH ROW
BEGIN

    IF :OLD.USER_ROLE != :NEW.USER_ROLE THEN

        IF :NEW.USER_ROLE = 'customer' THEN
            DELETE FROM SUPPLIER WHERE SUPPLIER_ID = :NEW.USER_ID;
            INSERT INTO CUSTOMER (CUSTOMER_ID) VALUES (:NEW.USER_ID);

        ELSIF :NEW.USER_ROLE = 'supplier' THEN
            DELETE FROM CUSTOMER WHERE CUSTOMER_ID = :NEW.USER_ID;
            INSERT INTO SUPPLIER (SUPPLIER_ID) VALUES (:NEW.USER_ID);
        END IF;
    END IF;
END;
/
ALTER TRIGGER "URBAN_FOOD"."TRG_USERROLECHANGE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INSERTUSERBYROLE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "URBAN_FOOD"."TRG_INSERTUSERBYROLE" 
AFTER INSERT ON USERS
FOR EACH ROW
BEGIN
    IF :NEW.USER_ROLE = 'customer' THEN
        INSERT INTO CUSTOMER (CUSTOMER_ID) VALUES (:NEW.USER_ID);

    ELSIF :NEW.USER_ROLE = 'supplier' THEN
        INSERT INTO SUPPLIER (SUPPLIER_ID) VALUES (:NEW.USER_ID);
    END IF;
END;
/
ALTER TRIGGER "URBAN_FOOD"."TRG_INSERTUSERBYROLE" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ADDTOCART
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."ADDTOCART" (
    p_CUSTOMER_ID IN  CART.CUSTOMER_ID %TYPE,
    p_PRODUCT_ID  IN  CART.PRODUCT_ID %TYPE,
    p_QUANTITY    IN  CART.QUANTITY %TYPE
)
AS
BEGIN
    INSERT INTO CART (CUSTOMER_ID, PRODUCT_ID,QUANTITY)
    VALUES (p_CUSTOMER_ID,p_PRODUCT_ID,p_QUANTITY);
    COMMIT;
EXCEPTION

    WHEN OTHERS THEN

        RAISE;

END;

/
--------------------------------------------------------
--  DDL for Procedure CATEGORYCONTROLLERPROCEDURE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."CATEGORYCONTROLLERPROCEDURE" (

    p_CRUD_TYPE    IN VARCHAR2,
    p_CATEGORY_ID  IN  CATEGORIES.CATEGORY_ID %TYPE DEFAULT NULL,
    p_NAME         IN  CATEGORIES.NAME %TYPE DEFAULT NULL,
    p_DESCRIPTION  IN  CATEGORIES.DESCRIPTION %TYPE DEFAULT NULL
    
)

AS
BEGIN
    IF p_CRUD_TYPE = 'INSERT' THEN

        NewCategory(p_NAME,p_DESCRIPTION);

    ELSIF p_CRUD_TYPE = 'UPDATE' THEN

        UpdateCategory(p_CATEGORY_ID,p_NAME,p_DESCRIPTION);

    ELSIF p_CRUD_TYPE = 'DELETE' THEN

        DeleteCategory(p_CATEGORY_ID);

    ELSE
        RAISE_APPLICATION_ERROR(-20000, 'Invalid operation type specified.');

    END IF;

END;

/
--------------------------------------------------------
--  DDL for Procedure CHECKCATEGORYAVAILABILITY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."CHECKCATEGORYAVAILABILITY" (
    p_CATEGORY_ID IN CATEGORIES.CATEGORY_ID%TYPE
)
AS
    categoryCount NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO categoryCount
    FROM CATEGORIES
    WHERE CATEGORY_ID = p_CATEGORY_ID;

    IF categoryCount = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'ID not Found');

    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure CHECKCUSTOMERAVAILABILITY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."CHECKCUSTOMERAVAILABILITY" (
    p_CUSTOMER_ID IN CUSTOMER.CUSTOMER_ID%TYPE
)
AS
    customerCount NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO customerCount
    FROM CUSTOMER
    WHERE CUSTOMER_ID = p_CUSTOMER_ID;

    IF customerCount = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Customer ID does not exists!');


    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure CHECKPRODUCTAVAILABILITY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."CHECKPRODUCTAVAILABILITY" (
    p_PRODUCT_ID IN PRODUCTS.PRODUCT_ID%TYPE
)
AS
    productCount NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO productCount
    FROM PRODUCTS
    WHERE PRODUCT_ID = p_PRODUCT_ID;

    IF productCount = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'ID not Found');

    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure CHECKSUPPLIERAVAILABILITY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."CHECKSUPPLIERAVAILABILITY" (
    p_SUPPLIER_ID IN SUPPLIER.SUPPLIER_ID%TYPE
)
AS
    supplierCount NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO supplierCount
    FROM SUPPLIER
    WHERE SUPPLIER_ID = p_SUPPLIER_ID;

    IF supplierCount = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'ID not Found');


    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure CHECKUSERAVAILABILITY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."CHECKUSERAVAILABILITY" (
    p_USER_ID IN USERS.USER_ID%TYPE
)
AS
    userCount NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO userCount
    FROM USERS
    WHERE USER_ID = p_USER_ID;

    IF userCount = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'ID not Found');


    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure CUSTOMERCONTROLLERPROCEDURE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."CUSTOMERCONTROLLERPROCEDURE" (

    p_CRUD_TYPE    IN VARCHAR2,
    p_CUSTOMER_ID IN CUSTOMER.CUSTOMER_ID%TYPE,
    p_FULL_NAME   IN CUSTOMER.FULL_NAME%TYPE DEFAULT NULL,
    p_PHONE       IN CUSTOMER.PHONE%TYPE DEFAULT NULL,
    p_ADDRESS     IN CUSTOMER.ADDRESS%TYPE DEFAULT NULL,
    p_IMAGE_URL   IN CUSTOMER.IMAGE_URL%TYPE DEFAULT NULL
    
)

AS
BEGIN
    IF p_CRUD_TYPE = 'INSERT' THEN

        NewCustomer(p_CUSTOMER_ID,p_FULL_NAME,p_PHONE,p_ADDRESS,p_IMAGE_URL);

    ELSIF p_CRUD_TYPE = 'UPDATE' THEN

        UpdateCustomer(p_FULL_NAME,p_PHONE,p_ADDRESS,p_IMAGE_URL,p_CUSTOMER_ID);

    ELSIF p_CRUD_TYPE = 'DELETE' THEN

        DeleteCustomer(p_CUSTOMER_ID);

    ELSE
        RAISE_APPLICATION_ERROR(-20002, 'Invalid operation type specified.');

    END IF;

END;

/
--------------------------------------------------------
--  DDL for Procedure DELETECATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."DELETECATEGORY" (
    
    p_CATEGORY_ID IN  CATEGORIES.CATEGORY_ID%TYPE
)
AS

BEGIN

    CheckCategoryAvailability(p_CATEGORY_ID);
    DELETE FROM CATEGORIES
    WHERE CATEGORY_ID = p_CATEGORY_ID;

    COMMIT;

EXCEPTION

     WHEN OTHERS THEN

            RAISE;

END;

/
--------------------------------------------------------
--  DDL for Procedure DELETECUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."DELETECUSTOMER" (
    
    p_CUSTOMER_ID IN CUSTOMER.CUSTOMER_ID%TYPE
)
AS

BEGIN

    CheckCustomerAvailability(p_CUSTOMER_ID);
    DELETE FROM CUSTOMER
    WHERE CUSTOMER_ID = p_CUSTOMER_ID;

    COMMIT;


END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."DELETEPRODUCT" (
    
    p_PRODUCT_ID IN  PRODUCTS.PRODUCT_ID%TYPE
)
AS

BEGIN

    CheckProductAvailability(p_PRODUCT_ID);
    DELETE FROM PRODUCTS
    WHERE PRODUCT_ID = p_PRODUCT_ID;

    COMMIT;

EXCEPTION

     WHEN OTHERS THEN

            RAISE;

END;

/
--------------------------------------------------------
--  DDL for Procedure DELETESUPPLIER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."DELETESUPPLIER" (
    
    p_SUPPLIER_ID IN SUPPLIER.SUPPLIER_ID%TYPE
)
AS

BEGIN

    CheckSupplierAvailability(p_SUPPLIER_ID);
    DELETE FROM SUPPLIER
    WHERE SUPPLIER_ID = p_SUPPLIER_ID;

    COMMIT;

EXCEPTION

     WHEN OTHERS THEN

        IF SQLCODE = -2292 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Foreign key Referenced Error!!');

        ELSE
            RAISE;
        END IF;


END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."DELETEUSER" (
    
    p_USER_ID IN  USERS.USER_ID%TYPE
)
AS

BEGIN

    CheckUserAvailability(p_USER_ID);
    DELETE FROM USERS
    WHERE USER_ID = p_USER_ID;

    COMMIT;

EXCEPTION

     WHEN OTHERS THEN

        IF SQLCODE = -2292 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Foreign key Referenced Error!!');

        ELSE
            RAISE;
        END IF;


END;

/
--------------------------------------------------------
--  DDL for Procedure NEWCATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."NEWCATEGORY" (
    p_NAME         IN  CATEGORIES.NAME %TYPE,
    p_DESCRIPTION  IN  CATEGORIES.DESCRIPTION %TYPE
)
AS
BEGIN
    INSERT INTO CATEGORIES (NAME, DESCRIPTION)
    VALUES (p_NAME,p_DESCRIPTION);
    COMMIT;
EXCEPTION

    WHEN OTHERS THEN

        RAISE;

END;

/
--------------------------------------------------------
--  DDL for Procedure NEWCUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."NEWCUSTOMER" (
    p_CUSTOMER_ID IN CUSTOMER.CUSTOMER_ID%TYPE,
    p_FULL_NAME IN  CUSTOMER.FULL_NAME%TYPE,
    p_PHONE IN      CUSTOMER.PHONE%TYPE,
    p_ADDRESS IN    CUSTOMER.ADDRESS%TYPE,
    p_IMAGE_URL IN  CUSTOMER.IMAGE_URL%TYPE
)
AS
BEGIN
    INSERT INTO CUSTOMER (CUSTOMER_ID, FULL_NAME, PHONE, ADDRESS, IMAGE_URL)
    VALUES (p_CUSTOMER_ID, p_FULL_NAME, p_PHONE, p_ADDRESS, p_IMAGE_URL);
    COMMIT;
EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -2291 THEN
            RAISE_APPLICATION_ERROR(-20001, 'The given CUSTOMER_ID does not exist in the referenced table!');
        ELSIF SQLCODE = -1 THEN
            RAISE_APPLICATION_ERROR(-20000, 'Customer ID already exists!');


        ELSE
            RAISE;
        END IF;

END;

/
--------------------------------------------------------
--  DDL for Procedure NEWPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."NEWPRODUCT" (
    p_SUPPLIER_ID  IN  PRODUCTS.SUPPLIER_ID %TYPE,
    p_CATEGORY_ID  IN  PRODUCTS.CATEGORY_ID %TYPE,
    p_NAME         IN  PRODUCTS.NAME %TYPE,
    p_IMAGE_URL    IN  PRODUCTS.IMAGE_URL %TYPE,
    p_WEIGHT       IN  PRODUCTS.WEIGHT %TYPE,
    p_STOCK        IN  PRODUCTS.STOCK %TYPE,
    p_PRICE        IN  PRODUCTS.PRICE %TYPE
)
AS
BEGIN
    INSERT INTO PRODUCTS (SUPPLIER_ID, CATEGORY_ID, NAME,IMAGE_URL,WEIGHT,STOCK,PRICE)
    VALUES (p_SUPPLIER_ID, p_CATEGORY_ID, p_NAME, p_IMAGE_URL,p_WEIGHT,p_STOCK,p_PRICE);
    COMMIT;
EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -2291 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Invalid Category ID or Supplier ID for the Product !!');

        ELSIF SQLCODE = -2290 THEN
            RAISE_APPLICATION_ERROR(-20000, 'Values should be Greater than 0 !!');

        ELSE
            RAISE;
        END IF;

END;

/
--------------------------------------------------------
--  DDL for Procedure NEWSUPPLIER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."NEWSUPPLIER" (
    p_SUPPLIER_ID IN SUPPLIER.SUPPLIER_ID%TYPE,
    p_FULL_NAME IN  SUPPLIER.FULL_NAME%TYPE,
    p_PHONE IN      SUPPLIER.PHONE%TYPE,
    p_ADDRESS IN    SUPPLIER.ADDRESS%TYPE,
    p_IMAGE_URL IN  SUPPLIER.IMAGE_URL%TYPE
)
AS
BEGIN
    INSERT INTO SUPPLIER (SUPPLIER_ID, FULL_NAME, PHONE,ADDRESS,IMAGE_URL)
    VALUES (p_SUPPLIER_ID, p_FULL_NAME, p_PHONE, p_ADDRESS, p_IMAGE_URL);
    COMMIT;
EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -2291 THEN
            RAISE_APPLICATION_ERROR(-20001, 'The given Supplier ID does not exist in the referenced table!');
        ELSIF SQLCODE = -1 THEN
            RAISE_APPLICATION_ERROR(-20002, 'Supplier ID already exists!');

        ELSIF SQLCODE = -1400 THEN
            RAISE_APPLICATION_ERROR(-20007, 'Null values not accepted!');


        ELSE
            RAISE;
        END IF;

END;

/
--------------------------------------------------------
--  DDL for Procedure NEWUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."NEWUSER" (
    p_USER_ROLE IN  USERS.USER_ROLE%TYPE,
    p_USER_NAME IN      USERS.USER_NAME%TYPE,
    p_USER_EMAIL IN    USERS.USER_EMAIL%TYPE,
    p_USER_PASSWORD IN  USERS.USER_PASSWORD%TYPE
)
AS
BEGIN
    INSERT INTO USERS (USER_ROLE, USER_NAME, USER_EMAIL,USER_PASSWORD)
    VALUES (p_USER_ROLE, p_USER_NAME, p_USER_EMAIL, p_USER_PASSWORD);
    COMMIT;
EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -1 THEN
            RAISE_APPLICATION_ERROR(-20002, 'User Email Already Exists!');

        ELSIF SQLCODE = -2290 THEN
            RAISE_APPLICATION_ERROR(-20000, 'Invalid User Role!');

        ELSIF SQLCODE = -1400 THEN
            RAISE_APPLICATION_ERROR(-20007, 'Null Values are not Accepted!');

        ELSE
            RAISE;

        END IF;
END;

/
--------------------------------------------------------
--  DDL for Procedure PLACEORDERBYCART
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."PLACEORDERBYCART" (
    p_customer_id IN NUMBER
)
IS
    new_order_id NUMBER;
    total_price NUMBER := 0;
BEGIN

   SELECT SUM(PRODUCTS.PRICE * CART.QUANTITY)
    INTO total_price
    FROM CART
    JOIN PRODUCTS ON CART.PRODUCT_ID = PRODUCTS.PRODUCT_ID
    WHERE CART.CUSTOMER_ID = p_customer_id;

   INSERT INTO ORDERS(CUSTOMER_ID,ORDER_DATE,TOTAL_PRICE)
   VALUES (p_customer_id, SYSDATE,total_price)
   RETURNING ORDER_ID INTO new_order_id;
   COMMIT;

   INSERT INTO ORDER_DETAILS (ORDER_ID, PRODUCT_ID, QUANTITY, SUB_TOTAL)
   SELECT new_order_id, CART.PRODUCT_ID, CART.QUANTITY, (CART.QUANTITY * PRODUCTS.PRICE)
   FROM CART
   JOIN PRODUCTS ON CART.PRODUCT_ID = PRODUCTS.PRODUCT_ID
   WHERE CART.CUSTOMER_ID = p_customer_id;

   COMMIT;


   DELETE FROM CART WHERE CUSTOMER_ID=p_customer_id;


    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure PRODUCTCONTROLLERPROCEDURE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."PRODUCTCONTROLLERPROCEDURE" (

    p_CRUD_TYPE    IN VARCHAR2,
    p_PRODUCT_ID   IN  PRODUCTS.PRODUCT_ID %TYPE DEFAULT NULL,
    p_SUPPLIER_ID  IN  PRODUCTS.SUPPLIER_ID %TYPE DEFAULT NULL,
    p_CATEGORY_ID  IN  PRODUCTS.CATEGORY_ID %TYPE DEFAULT NULL,
    p_NAME         IN  PRODUCTS.NAME %TYPE DEFAULT NULL,
    p_IMAGE_URL    IN  PRODUCTS.IMAGE_URL %TYPE DEFAULT NULL,
    p_WEIGHT       IN  PRODUCTS.WEIGHT %TYPE DEFAULT NULL,
    p_STOCK        IN  PRODUCTS.STOCK %TYPE DEFAULT NULL,
    p_PRICE        IN  PRODUCTS.PRICE %TYPE DEFAULT NULL
    
)

AS
BEGIN
    IF p_CRUD_TYPE = 'INSERT' THEN

        NewProduct(p_SUPPLIER_ID,p_CATEGORY_ID,p_NAME,p_IMAGE_URL,p_WEIGHT,p_STOCK,p_PRICE);

    ELSIF p_CRUD_TYPE = 'UPDATE' THEN

        UpdateProduct(p_PRODUCT_ID,p_SUPPLIER_ID,p_CATEGORY_ID,p_NAME,p_IMAGE_URL,p_WEIGHT,p_STOCK,p_PRICE);

    ELSIF p_CRUD_TYPE = 'DELETE' THEN

        DeleteProduct(p_PRODUCT_ID);

    ELSE
        RAISE_APPLICATION_ERROR(-20000, 'Invalid operation type specified.');

    END IF;

END;

/
--------------------------------------------------------
--  DDL for Procedure SUPPLIERCONTROLLERPROCEDURE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."SUPPLIERCONTROLLERPROCEDURE" (

    p_CRUD_TYPE   IN VARCHAR2,
    p_SUPPLIER_ID IN SUPPLIER.SUPPLIER_ID%TYPE,
    p_FULL_NAME   IN SUPPLIER.FULL_NAME%TYPE DEFAULT NULL,
    p_PHONE       IN SUPPLIER.PHONE%TYPE DEFAULT NULL,
    p_ADDRESS     IN SUPPLIER.ADDRESS%TYPE DEFAULT NULL,
    p_IMAGE_URL   IN SUPPLIER.IMAGE_URL%TYPE DEFAULT NULL
    
)

AS
BEGIN
    IF p_CRUD_TYPE = 'INSERT' THEN

        NewSupplier(p_SUPPLIER_ID,p_FULL_NAME,p_PHONE,p_ADDRESS,p_IMAGE_URL);

    ELSIF p_CRUD_TYPE = 'UPDATE' THEN

        UpdateSupplier(p_FULL_NAME,p_PHONE,p_ADDRESS,p_IMAGE_URL,p_SUPPLIER_ID);

    ELSIF p_CRUD_TYPE = 'DELETE' THEN

        DeleteSupplier(p_SUPPLIER_ID);

    ELSE
        RAISE_APPLICATION_ERROR(-20000, 'Invalid operation type specified.');

    END IF;

END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATECATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."UPDATECATEGORY" (
    p_CATEGORY_ID  IN  CATEGORIES.CATEGORY_ID %TYPE,
    p_NAME         IN  CATEGORIES.NAME %TYPE,
    p_DESCRIPTION  IN  CATEGORIES.DESCRIPTION %TYPE
    
)
AS

BEGIN

    CheckCategoryAvailability(p_CATEGORY_ID);

    UPDATE CATEGORIES
    SET   NAME        = p_NAME,
          DESCRIPTION = p_DESCRIPTION
    WHERE CATEGORY_ID = p_CATEGORY_ID;

    COMMIT;


EXCEPTION

    WHEN OTHERS THEN

            RAISE;

END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATECUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."UPDATECUSTOMER" (
    p_FULL_NAME IN  CUSTOMER.FULL_NAME%TYPE,
    p_PHONE IN      CUSTOMER.PHONE%TYPE,
    p_ADDRESS IN    CUSTOMER.ADDRESS%TYPE,
    p_IMAGE_URL IN  CUSTOMER.IMAGE_URL%TYPE,
    p_CUSTOMER_ID IN CUSTOMER.CUSTOMER_ID%TYPE
)
AS

BEGIN

    CheckCustomerAvailability(p_CUSTOMER_ID);

    UPDATE CUSTOMER
    SET FULL_NAME = p_FULL_NAME,
        PHONE = p_PHONE,
        ADDRESS = p_ADDRESS,
        IMAGE_URL = p_IMAGE_URL
    WHERE CUSTOMER_ID = p_CUSTOMER_ID;

    COMMIT;


END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEDELIVERYSTATUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."UPDATEDELIVERYSTATUS" (
    p_ORDER_ID  IN  PAYMENTS.ORDER_ID %TYPE
)
AS


    paymentStatus VARCHAR(20);

BEGIN

    UPDATE DELIVERY
    SET   STATUS  = 'Delivered'
    WHERE ORDER_ID = p_ORDER_ID;
    COMMIT;

    SELECT STATUS INTO paymentStatus
    FROM PAYMENTS
    WHERE ORDER_ID= p_ORDER_ID ;

    IF paymentStatus='Done' THEN 
        UPDATE ORDERS
        SET   ORDER_STATUS  = 'Done'
        WHERE ORDER_ID = p_ORDER_ID;
        COMMIT;
    END IF;

EXCEPTION

    WHEN OTHERS THEN

            RAISE;

END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEPAYMENTSTATUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."UPDATEPAYMENTSTATUS" (
    p_ORDER_ID  IN  PAYMENTS.ORDER_ID %TYPE
)
AS


    shippingStatus VARCHAR(20);

BEGIN

    UPDATE PAYMENTS
    SET   STATUS  = 'Done'
    WHERE ORDER_ID = p_ORDER_ID;
    COMMIT;

    SELECT STATUS INTO shippingStatus
    FROM DELIVERY
    WHERE ORDER_ID= p_ORDER_ID ;

    IF shippingStatus='Delivered' THEN 
        UPDATE ORDERS
        SET   ORDER_STATUS  = 'Done'
        WHERE ORDER_ID = p_ORDER_ID;
        COMMIT;
    END IF;

EXCEPTION

    WHEN OTHERS THEN

            RAISE;

END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."UPDATEPRODUCT" (
    p_PRODUCT_ID   IN  PRODUCTS.PRODUCT_ID %TYPE,
    p_SUPPLIER_ID  IN  PRODUCTS.SUPPLIER_ID %TYPE,
    p_CATEGORY_ID  IN  PRODUCTS.CATEGORY_ID %TYPE,
    p_NAME         IN  PRODUCTS.NAME %TYPE,
    p_IMAGE_URL    IN  PRODUCTS.IMAGE_URL %TYPE,
    p_WEIGHT       IN  PRODUCTS.WEIGHT %TYPE,
    p_STOCK        IN  PRODUCTS.STOCK %TYPE,
    p_PRICE        IN  PRODUCTS.PRICE %TYPE
)
AS

BEGIN

    CheckProductAvailability(p_PRODUCT_ID);

    UPDATE PRODUCTS
    SET SUPPLIER_ID = p_SUPPLIER_ID,
        CATEGORY_ID = p_CATEGORY_ID,
        NAME = p_NAME,
        IMAGE_URL = p_IMAGE_URL,
        WEIGHT = p_WEIGHT,
        STOCK = p_STOCK,
        PRICE = p_PRICE
    WHERE PRODUCT_ID = p_PRODUCT_ID;

    COMMIT;


EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -2291 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Invalid Category ID or Supplier ID for the Product !!');

        ELSIF SQLCODE = -2290 THEN
            RAISE_APPLICATION_ERROR(-20000, 'Values should be Greater than 0 !!');

        ELSE
            RAISE;
        END IF;


END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATESUPPLIER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."UPDATESUPPLIER" (
    p_FULL_NAME IN  SUPPLIER.FULL_NAME%TYPE,
    p_PHONE IN      SUPPLIER.PHONE%TYPE,
    p_ADDRESS IN    SUPPLIER.ADDRESS%TYPE,
    p_IMAGE_URL IN  SUPPLIER.IMAGE_URL%TYPE,
    p_SUPPLIER_ID IN SUPPLIER.SUPPLIER_ID%TYPE
)
AS

BEGIN

    CheckSupplierAvailability(p_SUPPLIER_ID);

    UPDATE SUPPLIER
    SET FULL_NAME = p_FULL_NAME,
        PHONE = p_PHONE,
        ADDRESS = p_ADDRESS,
        IMAGE_URL = p_IMAGE_URL
    WHERE SUPPLIER_ID = p_SUPPLIER_ID;

    COMMIT;


EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -1407 THEN
            RAISE_APPLICATION_ERROR(-20007, 'Null Values are not Accepted!!');
        ELSIF SQLCODE = -1 THEN
            RAISE_APPLICATION_ERROR(-20002, 'Supplier ID already exists!');

        ELSE
            RAISE;
        END IF;


END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."UPDATEUSER" (
    p_USER_ID   IN  USERS.USER_ID %TYPE,
    p_USER_ROLE IN  USERS.USER_ROLE %TYPE,
    p_USER_NAME IN      USERS.USER_NAME %TYPE,
    p_USER_EMAIL IN    USERS.USER_EMAIL %TYPE,
    p_USER_PASSWORD IN  USERS.USER_PASSWORD %TYPE
)
AS

BEGIN

    CheckUserAvailability(p_USER_ID);

    UPDATE USERS
    SET USER_ROLE = p_USER_ROLE,
        USER_NAME = p_USER_NAME,
        USER_EMAIL = p_USER_EMAIL,
        USER_PASSWORD = p_USER_PASSWORD
    WHERE USER_ID = p_USER_ID;

    COMMIT;


EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -1407 THEN
            RAISE_APPLICATION_ERROR(-20007, 'Null Values are not Accepted!!');
        ELSIF SQLCODE = -1 THEN
            RAISE_APPLICATION_ERROR(-20002, 'User Email Already Exists!');
        ELSIF SQLCODE = -2290 THEN
            RAISE_APPLICATION_ERROR(-20000, 'Invalid User Role!');

        ELSE
            RAISE;
        END IF;


END;

/
--------------------------------------------------------
--  DDL for Procedure USERSCONTROLLERPROCEDURE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."USERSCONTROLLERPROCEDURE" (

    p_CRUD_TYPE   IN VARCHAR2,
    p_USER_ID   IN  USERS.USER_ID%TYPE DEFAULT NULL,
    p_USER_ROLE IN  USERS.USER_ROLE%TYPE DEFAULT NULL,
    p_USER_NAME IN      USERS.USER_NAME%TYPE DEFAULT NULL,
    p_USER_EMAIL IN    USERS.USER_EMAIL%TYPE DEFAULT NULL,
    p_USER_PASSWORD IN  USERS.USER_PASSWORD%TYPE DEFAULT NULL
    
)

AS
BEGIN
    IF p_CRUD_TYPE = 'INSERT' THEN

        NewUser(p_USER_ROLE,p_USER_NAME,p_USER_EMAIL,p_USER_PASSWORD);

    ELSIF p_CRUD_TYPE = 'UPDATE' THEN

        UpdateUser(p_USER_ID,p_USER_ROLE,p_USER_NAME,p_USER_EMAIL,p_USER_PASSWORD);

    ELSIF p_CRUD_TYPE = 'DELETE' THEN

        DeleteUser(p_USER_ID);

    ELSE
        RAISE_APPLICATION_ERROR(-20000, 'Invalid operation type specified.');

    END IF;

END;

/
--------------------------------------------------------
--  DDL for Procedure DELETECATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."DELETECATEGORY" (
    
    p_CATEGORY_ID IN  CATEGORIES.CATEGORY_ID%TYPE
)
AS

BEGIN

    CheckCategoryAvailability(p_CATEGORY_ID);
    DELETE FROM CATEGORIES
    WHERE CATEGORY_ID = p_CATEGORY_ID;

    COMMIT;

EXCEPTION

     WHEN OTHERS THEN

            RAISE;

END;

/
--------------------------------------------------------
--  DDL for Procedure NEWCATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."NEWCATEGORY" (
    p_NAME         IN  CATEGORIES.NAME %TYPE,
    p_DESCRIPTION  IN  CATEGORIES.DESCRIPTION %TYPE
)
AS
BEGIN
    INSERT INTO CATEGORIES (NAME, DESCRIPTION)
    VALUES (p_NAME,p_DESCRIPTION);
    COMMIT;
EXCEPTION

    WHEN OTHERS THEN

        RAISE;

END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATECATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."UPDATECATEGORY" (
    p_CATEGORY_ID  IN  CATEGORIES.CATEGORY_ID %TYPE,
    p_NAME         IN  CATEGORIES.NAME %TYPE,
    p_DESCRIPTION  IN  CATEGORIES.DESCRIPTION %TYPE
    
)
AS

BEGIN

    CheckCategoryAvailability(p_CATEGORY_ID);

    UPDATE CATEGORIES
    SET   NAME        = p_NAME,
          DESCRIPTION = p_DESCRIPTION
    WHERE CATEGORY_ID = p_CATEGORY_ID;

    COMMIT;


EXCEPTION

    WHEN OTHERS THEN

            RAISE;

END;

/
--------------------------------------------------------
--  DDL for Procedure NEWCUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."NEWCUSTOMER" (
    p_CUSTOMER_ID IN CUSTOMER.CUSTOMER_ID%TYPE,
    p_FULL_NAME IN  CUSTOMER.FULL_NAME%TYPE,
    p_PHONE IN      CUSTOMER.PHONE%TYPE,
    p_ADDRESS IN    CUSTOMER.ADDRESS%TYPE,
    p_IMAGE_URL IN  CUSTOMER.IMAGE_URL%TYPE
)
AS
BEGIN
    INSERT INTO CUSTOMER (CUSTOMER_ID, FULL_NAME, PHONE, ADDRESS, IMAGE_URL)
    VALUES (p_CUSTOMER_ID, p_FULL_NAME, p_PHONE, p_ADDRESS, p_IMAGE_URL);
    COMMIT;
EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -2291 THEN
            RAISE_APPLICATION_ERROR(-20001, 'The given CUSTOMER_ID does not exist in the referenced table!');
        ELSIF SQLCODE = -1 THEN
            RAISE_APPLICATION_ERROR(-20000, 'Customer ID already exists!');


        ELSE
            RAISE;
        END IF;

END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATECUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."UPDATECUSTOMER" (
    p_FULL_NAME IN  CUSTOMER.FULL_NAME%TYPE,
    p_PHONE IN      CUSTOMER.PHONE%TYPE,
    p_ADDRESS IN    CUSTOMER.ADDRESS%TYPE,
    p_IMAGE_URL IN  CUSTOMER.IMAGE_URL%TYPE,
    p_CUSTOMER_ID IN CUSTOMER.CUSTOMER_ID%TYPE
)
AS

BEGIN

    CheckCustomerAvailability(p_CUSTOMER_ID);

    UPDATE CUSTOMER
    SET FULL_NAME = p_FULL_NAME,
        PHONE = p_PHONE,
        ADDRESS = p_ADDRESS,
        IMAGE_URL = p_IMAGE_URL
    WHERE CUSTOMER_ID = p_CUSTOMER_ID;

    COMMIT;


END;

/
--------------------------------------------------------
--  DDL for Procedure DELETECUSTOMER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."DELETECUSTOMER" (
    
    p_CUSTOMER_ID IN CUSTOMER.CUSTOMER_ID%TYPE
)
AS

BEGIN

    CheckCustomerAvailability(p_CUSTOMER_ID);
    DELETE FROM CUSTOMER
    WHERE CUSTOMER_ID = p_CUSTOMER_ID;

    COMMIT;


END;

/
--------------------------------------------------------
--  DDL for Procedure CHECKCATEGORYAVAILABILITY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."CHECKCATEGORYAVAILABILITY" (
    p_CATEGORY_ID IN CATEGORIES.CATEGORY_ID%TYPE
)
AS
    categoryCount NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO categoryCount
    FROM CATEGORIES
    WHERE CATEGORY_ID = p_CATEGORY_ID;

    IF categoryCount = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'ID not Found');

    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure CHECKCUSTOMERAVAILABILITY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."CHECKCUSTOMERAVAILABILITY" (
    p_CUSTOMER_ID IN CUSTOMER.CUSTOMER_ID%TYPE
)
AS
    customerCount NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO customerCount
    FROM CUSTOMER
    WHERE CUSTOMER_ID = p_CUSTOMER_ID;

    IF customerCount = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Customer ID does not exists!');


    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure CHECKPRODUCTAVAILABILITY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."CHECKPRODUCTAVAILABILITY" (
    p_PRODUCT_ID IN PRODUCTS.PRODUCT_ID%TYPE
)
AS
    productCount NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO productCount
    FROM PRODUCTS
    WHERE PRODUCT_ID = p_PRODUCT_ID;

    IF productCount = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'ID not Found');

    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure CHECKSUPPLIERAVAILABILITY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."CHECKSUPPLIERAVAILABILITY" (
    p_SUPPLIER_ID IN SUPPLIER.SUPPLIER_ID%TYPE
)
AS
    supplierCount NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO supplierCount
    FROM SUPPLIER
    WHERE SUPPLIER_ID = p_SUPPLIER_ID;

    IF supplierCount = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'ID not Found');


    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure CHECKUSERAVAILABILITY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."CHECKUSERAVAILABILITY" (
    p_USER_ID IN USERS.USER_ID%TYPE
)
AS
    userCount NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO userCount
    FROM USERS
    WHERE USER_ID = p_USER_ID;

    IF userCount = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'ID not Found');


    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure NEWPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."NEWPRODUCT" (
    p_SUPPLIER_ID  IN  PRODUCTS.SUPPLIER_ID %TYPE,
    p_CATEGORY_ID  IN  PRODUCTS.CATEGORY_ID %TYPE,
    p_NAME         IN  PRODUCTS.NAME %TYPE,
    p_IMAGE_URL    IN  PRODUCTS.IMAGE_URL %TYPE,
    p_WEIGHT       IN  PRODUCTS.WEIGHT %TYPE,
    p_STOCK        IN  PRODUCTS.STOCK %TYPE,
    p_PRICE        IN  PRODUCTS.PRICE %TYPE
)
AS
BEGIN
    INSERT INTO PRODUCTS (SUPPLIER_ID, CATEGORY_ID, NAME,IMAGE_URL,WEIGHT,STOCK,PRICE)
    VALUES (p_SUPPLIER_ID, p_CATEGORY_ID, p_NAME, p_IMAGE_URL,p_WEIGHT,p_STOCK,p_PRICE);
    COMMIT;
EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -2291 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Invalid Category ID or Supplier ID for the Product !!');

        ELSIF SQLCODE = -2290 THEN
            RAISE_APPLICATION_ERROR(-20000, 'Values should be Greater than 0 !!');

        ELSE
            RAISE;
        END IF;

END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."UPDATEPRODUCT" (
    p_PRODUCT_ID   IN  PRODUCTS.PRODUCT_ID %TYPE,
    p_SUPPLIER_ID  IN  PRODUCTS.SUPPLIER_ID %TYPE,
    p_CATEGORY_ID  IN  PRODUCTS.CATEGORY_ID %TYPE,
    p_NAME         IN  PRODUCTS.NAME %TYPE,
    p_IMAGE_URL    IN  PRODUCTS.IMAGE_URL %TYPE,
    p_WEIGHT       IN  PRODUCTS.WEIGHT %TYPE,
    p_STOCK        IN  PRODUCTS.STOCK %TYPE,
    p_PRICE        IN  PRODUCTS.PRICE %TYPE
)
AS

BEGIN

    CheckProductAvailability(p_PRODUCT_ID);

    UPDATE PRODUCTS
    SET SUPPLIER_ID = p_SUPPLIER_ID,
        CATEGORY_ID = p_CATEGORY_ID,
        NAME = p_NAME,
        IMAGE_URL = p_IMAGE_URL,
        WEIGHT = p_WEIGHT,
        STOCK = p_STOCK,
        PRICE = p_PRICE
    WHERE PRODUCT_ID = p_PRODUCT_ID;

    COMMIT;


EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -2291 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Invalid Category ID or Supplier ID for the Product !!');

        ELSIF SQLCODE = -2290 THEN
            RAISE_APPLICATION_ERROR(-20000, 'Values should be Greater than 0 !!');

        ELSE
            RAISE;
        END IF;


END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."DELETEPRODUCT" (
    
    p_PRODUCT_ID IN  PRODUCTS.PRODUCT_ID%TYPE
)
AS

BEGIN

    CheckProductAvailability(p_PRODUCT_ID);
    DELETE FROM PRODUCTS
    WHERE PRODUCT_ID = p_PRODUCT_ID;

    COMMIT;

EXCEPTION

     WHEN OTHERS THEN

            RAISE;

END;

/
--------------------------------------------------------
--  DDL for Procedure NEWSUPPLIER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."NEWSUPPLIER" (
    p_SUPPLIER_ID IN SUPPLIER.SUPPLIER_ID%TYPE,
    p_FULL_NAME IN  SUPPLIER.FULL_NAME%TYPE,
    p_PHONE IN      SUPPLIER.PHONE%TYPE,
    p_ADDRESS IN    SUPPLIER.ADDRESS%TYPE,
    p_IMAGE_URL IN  SUPPLIER.IMAGE_URL%TYPE
)
AS
BEGIN
    INSERT INTO SUPPLIER (SUPPLIER_ID, FULL_NAME, PHONE,ADDRESS,IMAGE_URL)
    VALUES (p_SUPPLIER_ID, p_FULL_NAME, p_PHONE, p_ADDRESS, p_IMAGE_URL);
    COMMIT;
EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -2291 THEN
            RAISE_APPLICATION_ERROR(-20001, 'The given Supplier ID does not exist in the referenced table!');
        ELSIF SQLCODE = -1 THEN
            RAISE_APPLICATION_ERROR(-20002, 'Supplier ID already exists!');

        ELSIF SQLCODE = -1400 THEN
            RAISE_APPLICATION_ERROR(-20007, 'Null values not accepted!');


        ELSE
            RAISE;
        END IF;

END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATESUPPLIER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."UPDATESUPPLIER" (
    p_FULL_NAME IN  SUPPLIER.FULL_NAME%TYPE,
    p_PHONE IN      SUPPLIER.PHONE%TYPE,
    p_ADDRESS IN    SUPPLIER.ADDRESS%TYPE,
    p_IMAGE_URL IN  SUPPLIER.IMAGE_URL%TYPE,
    p_SUPPLIER_ID IN SUPPLIER.SUPPLIER_ID%TYPE
)
AS

BEGIN

    CheckSupplierAvailability(p_SUPPLIER_ID);

    UPDATE SUPPLIER
    SET FULL_NAME = p_FULL_NAME,
        PHONE = p_PHONE,
        ADDRESS = p_ADDRESS,
        IMAGE_URL = p_IMAGE_URL
    WHERE SUPPLIER_ID = p_SUPPLIER_ID;

    COMMIT;


EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -1407 THEN
            RAISE_APPLICATION_ERROR(-20007, 'Null Values are not Accepted!!');
        ELSIF SQLCODE = -1 THEN
            RAISE_APPLICATION_ERROR(-20002, 'Supplier ID already exists!');

        ELSE
            RAISE;
        END IF;


END;

/
--------------------------------------------------------
--  DDL for Procedure DELETESUPPLIER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."DELETESUPPLIER" (
    
    p_SUPPLIER_ID IN SUPPLIER.SUPPLIER_ID%TYPE
)
AS

BEGIN

    CheckSupplierAvailability(p_SUPPLIER_ID);
    DELETE FROM SUPPLIER
    WHERE SUPPLIER_ID = p_SUPPLIER_ID;

    COMMIT;

EXCEPTION

     WHEN OTHERS THEN

        IF SQLCODE = -2292 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Foreign key Referenced Error!!');

        ELSE
            RAISE;
        END IF;


END;

/
--------------------------------------------------------
--  DDL for Procedure NEWUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."NEWUSER" (
    p_USER_ROLE IN  USERS.USER_ROLE%TYPE,
    p_USER_NAME IN      USERS.USER_NAME%TYPE,
    p_USER_EMAIL IN    USERS.USER_EMAIL%TYPE,
    p_USER_PASSWORD IN  USERS.USER_PASSWORD%TYPE
)
AS
BEGIN
    INSERT INTO USERS (USER_ROLE, USER_NAME, USER_EMAIL,USER_PASSWORD)
    VALUES (p_USER_ROLE, p_USER_NAME, p_USER_EMAIL, p_USER_PASSWORD);
    COMMIT;
EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -1 THEN
            RAISE_APPLICATION_ERROR(-20002, 'User Email Already Exists!');

        ELSIF SQLCODE = -2290 THEN
            RAISE_APPLICATION_ERROR(-20000, 'Invalid User Role!');

        ELSIF SQLCODE = -1400 THEN
            RAISE_APPLICATION_ERROR(-20007, 'Null Values are not Accepted!');

        ELSE
            RAISE;

        END IF;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."UPDATEUSER" (
    p_USER_ID   IN  USERS.USER_ID %TYPE,
    p_USER_ROLE IN  USERS.USER_ROLE %TYPE,
    p_USER_NAME IN      USERS.USER_NAME %TYPE,
    p_USER_EMAIL IN    USERS.USER_EMAIL %TYPE,
    p_USER_PASSWORD IN  USERS.USER_PASSWORD %TYPE
)
AS

BEGIN

    CheckUserAvailability(p_USER_ID);

    UPDATE USERS
    SET USER_ROLE = p_USER_ROLE,
        USER_NAME = p_USER_NAME,
        USER_EMAIL = p_USER_EMAIL,
        USER_PASSWORD = p_USER_PASSWORD
    WHERE USER_ID = p_USER_ID;

    COMMIT;


EXCEPTION

    WHEN OTHERS THEN

        IF SQLCODE = -1407 THEN
            RAISE_APPLICATION_ERROR(-20007, 'Null Values are not Accepted!!');
        ELSIF SQLCODE = -1 THEN
            RAISE_APPLICATION_ERROR(-20002, 'User Email Already Exists!');
        ELSIF SQLCODE = -2290 THEN
            RAISE_APPLICATION_ERROR(-20000, 'Invalid User Role!');

        ELSE
            RAISE;
        END IF;


END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "URBAN_FOOD"."DELETEUSER" (
    
    p_USER_ID IN  USERS.USER_ID%TYPE
)
AS

BEGIN

    CheckUserAvailability(p_USER_ID);
    DELETE FROM USERS
    WHERE USER_ID = p_USER_ID;

    COMMIT;

EXCEPTION

     WHEN OTHERS THEN

        IF SQLCODE = -2292 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Foreign key Referenced Error!!');

        ELSE
            RAISE;
        END IF;


END;

/
--------------------------------------------------------
--  DDL for Function GETCUSTOMERPROFILE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "URBAN_FOOD"."GETCUSTOMERPROFILE" (p_USER_ID IN NUMBER)
RETURN SYS_REFCURSOR
IS
  v_cursor SYS_REFCURSOR;
BEGIN
  OPEN v_cursor FOR
    SELECT 
      USERS.USER_EMAIL as email,
      USERS.USER_PASSWORD as password,
      USERS.USER_ROLE as role,
      CUSTOMER.PHONE as contact,
      CUSTOMER.ADDRESS as address,
      CUSTOMER.FULL_NAME as company
    FROM 
      USERS
    LEFT JOIN 
      CUSTOMER ON USERS.USER_ID = CUSTOMER.CUSTOMER_ID
    WHERE 
      USERS.USER_ID = p_USER_ID;

  RETURN v_cursor;
END getCustomerProfile;

/
--------------------------------------------------------
--  Constraints for Table CART
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."CART" MODIFY ("CART_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."CART" MODIFY ("CUSTOMER_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."CART" MODIFY ("PRODUCT_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."CART" ADD PRIMARY KEY ("CART_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CATEGORIES
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."CATEGORIES" MODIFY ("CATEGORY_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."CATEGORIES" ADD PRIMARY KEY ("CATEGORY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CUSTOMER
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."CUSTOMER" ADD PRIMARY KEY ("CUSTOMER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CUSTOMER_FEEDBACK
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."CUSTOMER_FEEDBACK" MODIFY ("FEEDBACK_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."CUSTOMER_FEEDBACK" ADD PRIMARY KEY ("FEEDBACK_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DELIVERY
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."DELIVERY" MODIFY ("DELIVERY_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."DELIVERY" ADD CONSTRAINT "CHK_CONSTRAINT" CHECK (STATUS IN('Processing', 'Shipped', 'Delivered','Cancelled')) ENABLE;
  ALTER TABLE "URBAN_FOOD"."DELIVERY" ADD PRIMARY KEY ("DELIVERY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ORDERS
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."ORDERS" ADD CONSTRAINT "CHK_ORDERSTATUS" CHECK (ORDER_STATUS IN('Processing', 'Done', 'Cancelled')) ENABLE;
  ALTER TABLE "URBAN_FOOD"."ORDERS" MODIFY ("TOTAL_PRICE" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."ORDERS" MODIFY ("ORDER_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."ORDERS" MODIFY ("CUSTOMER_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."ORDERS" ADD CONSTRAINT "CHK_TOTAL_PRICE" CHECK (TOTAL_PRICE >= 0) ENABLE;
  ALTER TABLE "URBAN_FOOD"."ORDERS" ADD PRIMARY KEY ("ORDER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ORDER_DETAILS
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."ORDER_DETAILS" MODIFY ("ORDER_DETAIL_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."ORDER_DETAILS" ADD PRIMARY KEY ("ORDER_DETAIL_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ORDER_LOG
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."ORDER_LOG" MODIFY ("LOG_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."ORDER_LOG" MODIFY ("TOTAL_PRICE" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."ORDER_LOG" ADD PRIMARY KEY ("LOG_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PAYMENTS
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."PAYMENTS" MODIFY ("PAYMENT_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."PAYMENTS" MODIFY ("TOTAL_PRICE" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."PAYMENTS" ADD CONSTRAINT "CHK_PAYMENTSTATUS" CHECK (STATUS IN('Processing', 'Done')) ENABLE;
  ALTER TABLE "URBAN_FOOD"."PAYMENTS" ADD PRIMARY KEY ("PAYMENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRODUCTS
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."PRODUCTS" MODIFY ("PRODUCT_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."PRODUCTS" ADD CONSTRAINT "CHK_PRODUCT_PRICE" CHECK (PRICE > 0) ENABLE;
  ALTER TABLE "URBAN_FOOD"."PRODUCTS" ADD CONSTRAINT "CHK_PRODUCT_STOCK" CHECK (STOCK > 0) ENABLE;
  ALTER TABLE "URBAN_FOOD"."PRODUCTS" ADD CONSTRAINT "CHK_PRODUCT_WEIGHT" CHECK (WEIGHT > 0) ENABLE;
  ALTER TABLE "URBAN_FOOD"."PRODUCTS" ADD PRIMARY KEY ("PRODUCT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SUPPLIER
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."SUPPLIER" ADD PRIMARY KEY ("SUPPLIER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."USERS" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."USERS" MODIFY ("USER_ROLE" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."USERS" MODIFY ("USER_NAME" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."USERS" MODIFY ("USER_EMAIL" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."USERS" MODIFY ("USER_PASSWORD" NOT NULL ENABLE);
  ALTER TABLE "URBAN_FOOD"."USERS" ADD CONSTRAINT "CHK_USER_ROLE" CHECK (USER_ROLE IN ('admin', 'customer', 'supplier')) ENABLE;
  ALTER TABLE "URBAN_FOOD"."USERS" ADD PRIMARY KEY ("USER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "URBAN_FOOD"."USERS" ADD UNIQUE ("USER_EMAIL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CART
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."CART" ADD CONSTRAINT "FK_CART_CUSTOMER" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "URBAN_FOOD"."CUSTOMER" ("CUSTOMER_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "URBAN_FOOD"."CART" ADD CONSTRAINT "FK_CART_PRODUCT" FOREIGN KEY ("PRODUCT_ID")
	  REFERENCES "URBAN_FOOD"."PRODUCTS" ("PRODUCT_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CUSTOMER
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."CUSTOMER" ADD CONSTRAINT "CUSTOMER_USERS_FK" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "URBAN_FOOD"."USERS" ("USER_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CUSTOMER_FEEDBACK
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."CUSTOMER_FEEDBACK" ADD FOREIGN KEY ("USER_ID")
	  REFERENCES "URBAN_FOOD"."USERS" ("USER_ID") ENABLE;
  ALTER TABLE "URBAN_FOOD"."CUSTOMER_FEEDBACK" ADD CONSTRAINT "FK_FEEDBACK_PRODUCT" FOREIGN KEY ("PRODUCT_ID")
	  REFERENCES "URBAN_FOOD"."PRODUCTS" ("PRODUCT_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DELIVERY
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."DELIVERY" ADD CONSTRAINT "FK_DELIVERY_ORDERID" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "URBAN_FOOD"."ORDERS" ("ORDER_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ORDERS
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."ORDERS" ADD FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "URBAN_FOOD"."CUSTOMER" ("CUSTOMER_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ORDER_DETAILS
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."ORDER_DETAILS" ADD FOREIGN KEY ("ORDER_ID")
	  REFERENCES "URBAN_FOOD"."ORDERS" ("ORDER_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "URBAN_FOOD"."ORDER_DETAILS" ADD FOREIGN KEY ("PRODUCT_ID")
	  REFERENCES "URBAN_FOOD"."PRODUCTS" ("PRODUCT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PAYMENTS
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."PAYMENTS" ADD CONSTRAINT "FK_PAYMENT_ORDERID" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "URBAN_FOOD"."ORDERS" ("ORDER_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCTS
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."PRODUCTS" ADD FOREIGN KEY ("SUPPLIER_ID")
	  REFERENCES "URBAN_FOOD"."SUPPLIER" ("SUPPLIER_ID") ENABLE;
  ALTER TABLE "URBAN_FOOD"."PRODUCTS" ADD FOREIGN KEY ("CATEGORY_ID")
	  REFERENCES "URBAN_FOOD"."CATEGORIES" ("CATEGORY_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SUPPLIER
--------------------------------------------------------

  ALTER TABLE "URBAN_FOOD"."SUPPLIER" ADD CONSTRAINT "SUPPLIER_USERS_FK" FOREIGN KEY ("SUPPLIER_ID")
	  REFERENCES "URBAN_FOOD"."USERS" ("USER_ID") ON DELETE CASCADE ENABLE;
